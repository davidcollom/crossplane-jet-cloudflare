/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigObservation struct {
}

type ConfigParameters struct {

	// +kubebuilder:validation:Optional
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// +kubebuilder:validation:Optional
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`
}

type PostureIntegrationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PostureIntegrationParameters struct {

	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// PostureIntegrationSpec defines the desired state of PostureIntegration
type PostureIntegrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PostureIntegrationParameters `json:"forProvider"`
}

// PostureIntegrationStatus defines the observed state of PostureIntegration.
type PostureIntegrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PostureIntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PostureIntegration is the Schema for the PostureIntegrations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type PostureIntegration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PostureIntegrationSpec   `json:"spec"`
	Status            PostureIntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PostureIntegrationList contains a list of PostureIntegrations
type PostureIntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PostureIntegration `json:"items"`
}

// Repository type metadata.
var (
	PostureIntegration_Kind             = "PostureIntegration"
	PostureIntegration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PostureIntegration_Kind}.String()
	PostureIntegration_KindAPIVersion   = PostureIntegration_Kind + "." + CRDGroupVersion.String()
	PostureIntegration_GroupVersionKind = CRDGroupVersion.WithKind(PostureIntegration_Kind)
)

func init() {
	SchemeBuilder.Register(&PostureIntegration{}, &PostureIntegrationList{})
}
