/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
<<<<<<< HEAD

)




type PolicyCertificatesObservation struct {


ID *string `json:"id,omitempty" tf:"id,omitempty"`
}


type PolicyCertificatesParameters struct {


// +kubebuilder:validation:Required
Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

// +kubebuilder:validation:Required
ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
=======
)

type PolicyCertificatesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyCertificatesParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
>>>>>>> 205d351
}

// PolicyCertificatesSpec defines the desired state of PolicyCertificates
type PolicyCertificatesSpec struct {
	v1.ResourceSpec `json:",inline"`
<<<<<<< HEAD
	ForProvider       PolicyCertificatesParameters `json:"forProvider"`
=======
	ForProvider     PolicyCertificatesParameters `json:"forProvider"`
>>>>>>> 205d351
}

// PolicyCertificatesStatus defines the observed state of PolicyCertificates.
type PolicyCertificatesStatus struct {
	v1.ResourceStatus `json:",inline"`
<<<<<<< HEAD
	AtProvider          PolicyCertificatesObservation `json:"atProvider,omitempty"`
=======
	AtProvider        PolicyCertificatesObservation `json:"atProvider,omitempty"`
>>>>>>> 205d351
}

// +kubebuilder:object:root=true

// PolicyCertificates is the Schema for the PolicyCertificatess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type PolicyCertificates struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyCertificatesSpec   `json:"spec"`
	Status            PolicyCertificatesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyCertificatesList contains a list of PolicyCertificatess
type PolicyCertificatesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyCertificates `json:"items"`
}

// Repository type metadata.
var (
	PolicyCertificates_Kind             = "PolicyCertificates"
	PolicyCertificates_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyCertificates_Kind}.String()
	PolicyCertificates_KindAPIVersion   = PolicyCertificates_Kind + "." + CRDGroupVersion.String()
	PolicyCertificates_GroupVersionKind = CRDGroupVersion.WithKind(PolicyCertificates_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyCertificates{}, &PolicyCertificatesList{})
}
