/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionParametersObservation struct {
}

type ActionParametersParameters struct {

	// +kubebuilder:validation:Optional
	Headers []HeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Increment *float64 `json:"increment,omitempty" tf:"increment,omitempty"`

	// +kubebuilder:validation:Optional
	MatchedData []MatchedDataParameters `json:"matchedData,omitempty" tf:"matched_data,omitempty"`

	// +kubebuilder:validation:Optional
	Overrides []OverridesParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// +kubebuilder:validation:Optional
	Phases []*string `json:"phases,omitempty" tf:"phases,omitempty"`

	// +kubebuilder:validation:Optional
	Products []*string `json:"products,omitempty" tf:"products,omitempty"`

	// +kubebuilder:validation:Optional
	Rules map[string]*string `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	Ruleset *string `json:"ruleset,omitempty" tf:"ruleset,omitempty"`

	// +kubebuilder:validation:Optional
	Rulesets []*string `json:"rulesets,omitempty" tf:"rulesets,omitempty"`

	// +kubebuilder:validation:Optional
	URI []URIParameters `json:"uri,omitempty" tf:"uri,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CategoriesObservation struct {
}

type CategoriesParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ExposedCredentialCheckObservation struct {
}

type ExposedCredentialCheckParameters struct {

	// +kubebuilder:validation:Optional
	PasswordExpression *string `json:"passwordExpression,omitempty" tf:"password_expression,omitempty"`

	// +kubebuilder:validation:Optional
	UsernameExpression *string `json:"usernameExpression,omitempty" tf:"username_expression,omitempty"`
}

type HeadersObservation struct {
}

type HeadersParameters struct {

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MatchedDataObservation struct {
}

type MatchedDataParameters struct {

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type OverridesObservation struct {
}

type OverridesParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Categories []CategoriesParameters `json:"categories,omitempty" tf:"categories,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []OverridesRulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type OverridesRulesObservation struct {
}

type OverridesRulesParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	ScoreThreshold *float64 `json:"scoreThreshold,omitempty" tf:"score_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type PathObservation struct {
}

type PathParameters struct {

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryObservation struct {
}

type QueryParameters struct {

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RatelimitObservation struct {
}

type RatelimitParameters struct {

	// +kubebuilder:validation:Optional
	Characteristics []*string `json:"characteristics,omitempty" tf:"characteristics,omitempty"`

	// +kubebuilder:validation:Optional
	CountingExpression *string `json:"countingExpression,omitempty" tf:"counting_expression,omitempty"`

	// +kubebuilder:validation:Optional
	MitigationTimeout *float64 `json:"mitigationTimeout,omitempty" tf:"mitigation_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsPerPeriod *float64 `json:"requestsPerPeriod,omitempty" tf:"requests_per_period,omitempty"`
}

type RulesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	ActionParameters []ActionParametersParameters `json:"actionParameters,omitempty" tf:"action_parameters,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExposedCredentialCheck []ExposedCredentialCheckParameters `json:"exposedCredentialCheck,omitempty" tf:"exposed_credential_check,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	Ratelimit []RatelimitParameters `json:"ratelimit,omitempty" tf:"ratelimit,omitempty"`
}

type RulesetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RulesetParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// +kubebuilder:validation:Required
	Phase *string `json:"phase" tf:"phase,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	ShareableEntitlementName *string `json:"shareableEntitlementName,omitempty" tf:"shareable_entitlement_name,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type URIObservation struct {
}

type URIParameters struct {

	// +kubebuilder:validation:Optional
	Origin *bool `json:"origin,omitempty" tf:"origin,omitempty"`

	// +kubebuilder:validation:Optional
	Path []PathParameters `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

// RulesetSpec defines the desired state of Ruleset
type RulesetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RulesetParameters `json:"forProvider"`
}

// RulesetStatus defines the observed state of Ruleset.
type RulesetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RulesetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ruleset is the Schema for the Rulesets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type Ruleset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RulesetSpec   `json:"spec"`
	Status            RulesetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RulesetList contains a list of Rulesets
type RulesetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ruleset `json:"items"`
}

// Repository type metadata.
var (
	Ruleset_Kind             = "Ruleset"
	Ruleset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ruleset_Kind}.String()
	Ruleset_KindAPIVersion   = Ruleset_Kind + "." + CRDGroupVersion.String()
	Ruleset_GroupVersionKind = CRDGroupVersion.WithKind(Ruleset_Kind)
)

func init() {
	SchemeBuilder.Register(&Ruleset{}, &RulesetList{})
}
