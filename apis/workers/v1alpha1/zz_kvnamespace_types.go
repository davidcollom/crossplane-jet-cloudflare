/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
<<<<<<< HEAD

)




type KvNamespaceObservation struct {


ID *string `json:"id,omitempty" tf:"id,omitempty"`
}


type KvNamespaceParameters struct {


// +kubebuilder:validation:Required
Title *string `json:"title" tf:"title,omitempty"`
=======
)

type KvNamespaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KvNamespaceParameters struct {

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
>>>>>>> 205d351
}

// KvNamespaceSpec defines the desired state of KvNamespace
type KvNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
<<<<<<< HEAD
	ForProvider       KvNamespaceParameters `json:"forProvider"`
=======
	ForProvider     KvNamespaceParameters `json:"forProvider"`
>>>>>>> 205d351
}

// KvNamespaceStatus defines the observed state of KvNamespace.
type KvNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
<<<<<<< HEAD
	AtProvider          KvNamespaceObservation `json:"atProvider,omitempty"`
=======
	AtProvider        KvNamespaceObservation `json:"atProvider,omitempty"`
>>>>>>> 205d351
}

// +kubebuilder:object:root=true

// KvNamespace is the Schema for the KvNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type KvNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KvNamespaceSpec   `json:"spec"`
	Status            KvNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KvNamespaceList contains a list of KvNamespaces
type KvNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KvNamespace `json:"items"`
}

// Repository type metadata.
var (
	KvNamespace_Kind             = "KvNamespace"
	KvNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KvNamespace_Kind}.String()
	KvNamespace_KindAPIVersion   = KvNamespace_Kind + "." + CRDGroupVersion.String()
	KvNamespace_GroupVersionKind = CRDGroupVersion.WithKind(KvNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&KvNamespace{}, &KvNamespaceList{})
}
