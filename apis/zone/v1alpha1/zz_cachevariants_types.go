/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

)




type CacheVariantsObservation struct {


ID *string `json:"id,omitempty" tf:"id,omitempty"`
}


type CacheVariantsParameters struct {


// +kubebuilder:validation:Optional
Avif []*string `json:"avif,omitempty" tf:"avif,omitempty"`

// +kubebuilder:validation:Optional
Bmp []*string `json:"bmp,omitempty" tf:"bmp,omitempty"`

// +kubebuilder:validation:Optional
Gif []*string `json:"gif,omitempty" tf:"gif,omitempty"`

// +kubebuilder:validation:Optional
Jp2 []*string `json:"jp2,omitempty" tf:"jp2,omitempty"`

// +kubebuilder:validation:Optional
Jpeg []*string `json:"jpeg,omitempty" tf:"jpeg,omitempty"`

// +kubebuilder:validation:Optional
Jpg []*string `json:"jpg,omitempty" tf:"jpg,omitempty"`

// +kubebuilder:validation:Optional
Jpg2 []*string `json:"jpg2,omitempty" tf:"jpg2,omitempty"`

// +kubebuilder:validation:Optional
Png []*string `json:"png,omitempty" tf:"png,omitempty"`

// +kubebuilder:validation:Optional
Tif []*string `json:"tif,omitempty" tf:"tif,omitempty"`

// +kubebuilder:validation:Optional
Tiff []*string `json:"tiff,omitempty" tf:"tiff,omitempty"`

// +kubebuilder:validation:Optional
Webp []*string `json:"webp,omitempty" tf:"webp,omitempty"`

// +kubebuilder:validation:Required
ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// CacheVariantsSpec defines the desired state of CacheVariants
type CacheVariantsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider       CacheVariantsParameters `json:"forProvider"`
}

// CacheVariantsStatus defines the observed state of CacheVariants.
type CacheVariantsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider          CacheVariantsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CacheVariants is the Schema for the CacheVariantss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type CacheVariants struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheVariantsSpec   `json:"spec"`
	Status            CacheVariantsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CacheVariantsList contains a list of CacheVariantss
type CacheVariantsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CacheVariants `json:"items"`
}

// Repository type metadata.
var (
	CacheVariants_Kind             = "CacheVariants"
	CacheVariants_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CacheVariants_Kind}.String()
	CacheVariants_KindAPIVersion   = CacheVariants_Kind + "." + CRDGroupVersion.String()
	CacheVariants_GroupVersionKind = CRDGroupVersion.WithKind(CacheVariants_Kind)
)

func init() {
	SchemeBuilder.Register(&CacheVariants{}, &CacheVariantsList{})
}
