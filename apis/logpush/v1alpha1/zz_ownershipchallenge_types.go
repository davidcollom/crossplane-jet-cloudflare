/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OwnershipChallengeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnershipChallengeFilename *string `json:"ownershipChallengeFilename,omitempty" tf:"ownership_challenge_filename,omitempty"`
}

type OwnershipChallengeParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	DestinationConf *string `json:"destinationConf" tf:"destination_conf,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// OwnershipChallengeSpec defines the desired state of OwnershipChallenge
type OwnershipChallengeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OwnershipChallengeParameters `json:"forProvider"`
}

// OwnershipChallengeStatus defines the observed state of OwnershipChallenge.
type OwnershipChallengeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OwnershipChallengeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OwnershipChallenge is the Schema for the OwnershipChallenges API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type OwnershipChallenge struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OwnershipChallengeSpec   `json:"spec"`
	Status            OwnershipChallengeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OwnershipChallengeList contains a list of OwnershipChallenges
type OwnershipChallengeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OwnershipChallenge `json:"items"`
}

// Repository type metadata.
var (
	OwnershipChallenge_Kind             = "OwnershipChallenge"
	OwnershipChallenge_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OwnershipChallenge_Kind}.String()
	OwnershipChallenge_KindAPIVersion   = OwnershipChallenge_Kind + "." + CRDGroupVersion.String()
	OwnershipChallenge_GroupVersionKind = CRDGroupVersion.WithKind(OwnershipChallenge_Kind)
)

func init() {
	SchemeBuilder.Register(&OwnershipChallenge{}, &OwnershipChallengeList{})
}
