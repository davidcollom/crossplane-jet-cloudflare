/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigObservation struct {
}

type ConfigParameters struct {

	// +kubebuilder:validation:Optional
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// +kubebuilder:validation:Optional
	AppsDomain *string `json:"appsDomain,omitempty" tf:"apps_domain,omitempty"`

	// +kubebuilder:validation:Optional
	Attributes []*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// +kubebuilder:validation:Optional
	CentrifyAccount *string `json:"centrifyAccount,omitempty" tf:"centrify_account,omitempty"`

	// +kubebuilder:validation:Optional
	CentrifyAppID *string `json:"centrifyAppId,omitempty" tf:"centrify_app_id,omitempty"`

	// +kubebuilder:validation:Optional
	CertsURL *string `json:"certsUrl,omitempty" tf:"certs_url,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// +kubebuilder:validation:Optional
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	IdpPublicCert *string `json:"idpPublicCert,omitempty" tf:"idp_public_cert,omitempty"`

	// +kubebuilder:validation:Optional
	IssuerURL *string `json:"issuerUrl,omitempty" tf:"issuer_url,omitempty"`

	// +kubebuilder:validation:Optional
	OktaAccount *string `json:"oktaAccount,omitempty" tf:"okta_account,omitempty"`

	// +kubebuilder:validation:Optional
	OneloginAccount *string `json:"oneloginAccount,omitempty" tf:"onelogin_account,omitempty"`

	// +kubebuilder:validation:Optional
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`

	// +kubebuilder:validation:Optional
	SignRequest *bool `json:"signRequest,omitempty" tf:"sign_request,omitempty"`

	// +kubebuilder:validation:Optional
	SsoTargetURL *string `json:"ssoTargetUrl,omitempty" tf:"sso_target_url,omitempty"`

	// +kubebuilder:validation:Optional
	SupportGroups *bool `json:"supportGroups,omitempty" tf:"support_groups,omitempty"`

	// +kubebuilder:validation:Optional
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type IdentityProviderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IdentityProviderParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// IdentityProviderSpec defines the desired state of IdentityProvider
type IdentityProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityProviderParameters `json:"forProvider"`
}

// IdentityProviderStatus defines the observed state of IdentityProvider.
type IdentityProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityProvider is the Schema for the IdentityProviders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type IdentityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityProviderSpec   `json:"spec"`
	Status            IdentityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityProviderList contains a list of IdentityProviders
type IdentityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityProvider `json:"items"`
}

// Repository type metadata.
var (
	IdentityProvider_Kind             = "IdentityProvider"
	IdentityProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IdentityProvider_Kind}.String()
	IdentityProvider_KindAPIVersion   = IdentityProvider_Kind + "." + CRDGroupVersion.String()
	IdentityProvider_GroupVersionKind = CRDGroupVersion.WithKind(IdentityProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&IdentityProvider{}, &IdentityProviderList{})
}
