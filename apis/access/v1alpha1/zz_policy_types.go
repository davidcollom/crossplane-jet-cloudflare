/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApprovalGroupObservation struct {
}

type ApprovalGroupParameters struct {

	// +kubebuilder:validation:Required
	ApprovalsNeeded *float64 `json:"approvalsNeeded" tf:"approvals_needed,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAddresses []*string `json:"emailAddresses,omitempty" tf:"email_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	EmailListUUID *string `json:"emailListUuid,omitempty" tf:"email_list_uuid,omitempty"`
}

type ExcludeAzureObservation struct {
}

type ExcludeAzureParameters struct {

	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type ExcludeGithubObservation struct {
}

type ExcludeGithubParameters struct {

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`
}

type ExcludeGsuiteObservation struct {
}

type ExcludeGsuiteParameters struct {

	// +kubebuilder:validation:Optional
	Email []*string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type ExcludeOktaObservation struct {
}

type ExcludeOktaParameters struct {

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name []*string `json:"name,omitempty" tf:"name,omitempty"`
}

type ExcludeSAMLObservation struct {
}

type ExcludeSAMLParameters struct {

	// +kubebuilder:validation:Optional
	AttributeName *string `json:"attributeName,omitempty" tf:"attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	AttributeValue *string `json:"attributeValue,omitempty" tf:"attribute_value,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type PolicyExcludeObservation struct {
}

type PolicyExcludeParameters struct {

	// +kubebuilder:validation:Optional
	AnyValidServiceToken *bool `json:"anyValidServiceToken,omitempty" tf:"any_valid_service_token,omitempty"`

	// +kubebuilder:validation:Optional
	AuthMethod *string `json:"authMethod,omitempty" tf:"auth_method,omitempty"`

	// +kubebuilder:validation:Optional
	Azure []ExcludeAzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// +kubebuilder:validation:Optional
	Certificate *bool `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	DevicePosture []*string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// +kubebuilder:validation:Optional
	Email []*string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	EmailDomain []*string `json:"emailDomain,omitempty" tf:"email_domain,omitempty"`

	// +kubebuilder:validation:Optional
	Everyone *bool `json:"everyone,omitempty" tf:"everyone,omitempty"`

	// +kubebuilder:validation:Optional
	Geo []*string `json:"geo,omitempty" tf:"geo,omitempty"`

	// +kubebuilder:validation:Optional
	Github []ExcludeGithubParameters `json:"github,omitempty" tf:"github,omitempty"`

	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	Gsuite []ExcludeGsuiteParameters `json:"gsuite,omitempty" tf:"gsuite,omitempty"`

	// +kubebuilder:validation:Optional
	IP []*string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	LoginMethod []*string `json:"loginMethod,omitempty" tf:"login_method,omitempty"`

	// +kubebuilder:validation:Optional
	Okta []ExcludeOktaParameters `json:"okta,omitempty" tf:"okta,omitempty"`

	// +kubebuilder:validation:Optional
	SAML []ExcludeSAMLParameters `json:"saml,omitempty" tf:"saml,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceToken []*string `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type PolicyIncludeAzureObservation struct {
}

type PolicyIncludeAzureParameters struct {

	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type PolicyIncludeGithubObservation struct {
}

type PolicyIncludeGithubParameters struct {

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`
}

type PolicyIncludeGsuiteObservation struct {
}

type PolicyIncludeGsuiteParameters struct {

	// +kubebuilder:validation:Optional
	Email []*string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type PolicyIncludeObservation struct {
}

type PolicyIncludeOktaObservation struct {
}

type PolicyIncludeOktaParameters struct {

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name []*string `json:"name,omitempty" tf:"name,omitempty"`
}

type PolicyIncludeParameters struct {

	// +kubebuilder:validation:Optional
	AnyValidServiceToken *bool `json:"anyValidServiceToken,omitempty" tf:"any_valid_service_token,omitempty"`

	// +kubebuilder:validation:Optional
	AuthMethod *string `json:"authMethod,omitempty" tf:"auth_method,omitempty"`

	// +kubebuilder:validation:Optional
	Azure []PolicyIncludeAzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// +kubebuilder:validation:Optional
	Certificate *bool `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	DevicePosture []*string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// +kubebuilder:validation:Optional
	Email []*string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	EmailDomain []*string `json:"emailDomain,omitempty" tf:"email_domain,omitempty"`

	// +kubebuilder:validation:Optional
	Everyone *bool `json:"everyone,omitempty" tf:"everyone,omitempty"`

	// +kubebuilder:validation:Optional
	Geo []*string `json:"geo,omitempty" tf:"geo,omitempty"`

	// +kubebuilder:validation:Optional
	Github []PolicyIncludeGithubParameters `json:"github,omitempty" tf:"github,omitempty"`

	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	Gsuite []PolicyIncludeGsuiteParameters `json:"gsuite,omitempty" tf:"gsuite,omitempty"`

	// +kubebuilder:validation:Optional
	IP []*string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	LoginMethod []*string `json:"loginMethod,omitempty" tf:"login_method,omitempty"`

	// +kubebuilder:validation:Optional
	Okta []PolicyIncludeOktaParameters `json:"okta,omitempty" tf:"okta,omitempty"`

	// +kubebuilder:validation:Optional
	SAML []PolicyIncludeSAMLParameters `json:"saml,omitempty" tf:"saml,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceToken []*string `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type PolicyIncludeSAMLObservation struct {
}

type PolicyIncludeSAMLParameters struct {

	// +kubebuilder:validation:Optional
	AttributeName *string `json:"attributeName,omitempty" tf:"attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	AttributeValue *string `json:"attributeValue,omitempty" tf:"attribute_value,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type PolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	ApprovalGroup []ApprovalGroupParameters `json:"approvalGroup,omitempty" tf:"approval_group,omitempty"`

	// +kubebuilder:validation:Optional
	ApprovalRequired *bool `json:"approvalRequired,omitempty" tf:"approval_required,omitempty"`

	// +kubebuilder:validation:Required
	Decision *string `json:"decision" tf:"decision,omitempty"`

	// +kubebuilder:validation:Optional
	Exclude []PolicyExcludeParameters `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// +kubebuilder:validation:Required
	Include []PolicyIncludeParameters `json:"include" tf:"include,omitempty"`

	// +kubebuilder:validation:Required
	Precedence *float64 `json:"precedence" tf:"precedence,omitempty"`

	// +kubebuilder:validation:Optional
	PurposeJustificationPrompt *string `json:"purposeJustificationPrompt,omitempty" tf:"purpose_justification_prompt,omitempty"`

	// +kubebuilder:validation:Optional
	PurposeJustificationRequired *bool `json:"purposeJustificationRequired,omitempty" tf:"purpose_justification_required,omitempty"`

	// +kubebuilder:validation:Optional
	Require []PolicyRequireParameters `json:"require,omitempty" tf:"require,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type PolicyRequireAzureObservation struct {
}

type PolicyRequireAzureParameters struct {

	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type PolicyRequireGithubObservation struct {
}

type PolicyRequireGithubParameters struct {

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`
}

type PolicyRequireGsuiteObservation struct {
}

type PolicyRequireGsuiteParameters struct {

	// +kubebuilder:validation:Optional
	Email []*string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

type PolicyRequireObservation struct {
}

type PolicyRequireOktaObservation struct {
}

type PolicyRequireOktaParameters struct {

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name []*string `json:"name,omitempty" tf:"name,omitempty"`
}

type PolicyRequireParameters struct {

	// +kubebuilder:validation:Optional
	AnyValidServiceToken *bool `json:"anyValidServiceToken,omitempty" tf:"any_valid_service_token,omitempty"`

	// +kubebuilder:validation:Optional
	AuthMethod *string `json:"authMethod,omitempty" tf:"auth_method,omitempty"`

	// +kubebuilder:validation:Optional
	Azure []PolicyRequireAzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// +kubebuilder:validation:Optional
	Certificate *bool `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	DevicePosture []*string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// +kubebuilder:validation:Optional
	Email []*string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	EmailDomain []*string `json:"emailDomain,omitempty" tf:"email_domain,omitempty"`

	// +kubebuilder:validation:Optional
	Everyone *bool `json:"everyone,omitempty" tf:"everyone,omitempty"`

	// +kubebuilder:validation:Optional
	Geo []*string `json:"geo,omitempty" tf:"geo,omitempty"`

	// +kubebuilder:validation:Optional
	Github []PolicyRequireGithubParameters `json:"github,omitempty" tf:"github,omitempty"`

	// +kubebuilder:validation:Optional
	Group []*string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	Gsuite []PolicyRequireGsuiteParameters `json:"gsuite,omitempty" tf:"gsuite,omitempty"`

	// +kubebuilder:validation:Optional
	IP []*string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	LoginMethod []*string `json:"loginMethod,omitempty" tf:"login_method,omitempty"`

	// +kubebuilder:validation:Optional
	Okta []PolicyRequireOktaParameters `json:"okta,omitempty" tf:"okta,omitempty"`

	// +kubebuilder:validation:Optional
	SAML []PolicyRequireSAMLParameters `json:"saml,omitempty" tf:"saml,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceToken []*string `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type PolicyRequireSAMLObservation struct {
}

type PolicyRequireSAMLParameters struct {

	// +kubebuilder:validation:Optional
	AttributeName *string `json:"attributeName,omitempty" tf:"attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	AttributeValue *string `json:"attributeValue,omitempty" tf:"attribute_value,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProviderID *string `json:"identityProviderId,omitempty" tf:"identity_provider_id,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Policy is the Schema for the Policys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec"`
	Status            PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
