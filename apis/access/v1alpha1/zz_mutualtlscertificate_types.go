/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MutualTLSCertificateObservation struct {
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MutualTLSCertificateParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	AssociatedHostnames []*string `json:"associatedHostnames,omitempty" tf:"associated_hostnames,omitempty"`

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// MutualTLSCertificateSpec defines the desired state of MutualTLSCertificate
type MutualTLSCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MutualTLSCertificateParameters `json:"forProvider"`
}

// MutualTLSCertificateStatus defines the observed state of MutualTLSCertificate.
type MutualTLSCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MutualTLSCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MutualTLSCertificate is the Schema for the MutualTLSCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type MutualTLSCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MutualTLSCertificateSpec   `json:"spec"`
	Status            MutualTLSCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MutualTLSCertificateList contains a list of MutualTLSCertificates
type MutualTLSCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MutualTLSCertificate `json:"items"`
}

// Repository type metadata.
var (
	MutualTLSCertificate_Kind             = "MutualTLSCertificate"
	MutualTLSCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MutualTLSCertificate_Kind}.String()
	MutualTLSCertificate_KindAPIVersion   = MutualTLSCertificate_Kind + "." + CRDGroupVersion.String()
	MutualTLSCertificate_GroupVersionKind = CRDGroupVersion.WithKind(MutualTLSCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&MutualTLSCertificate{}, &MutualTLSCertificateList{})
}
