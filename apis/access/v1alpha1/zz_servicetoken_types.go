/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceTokenObservation struct {
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceTokenParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	MinDaysForRenewal *float64 `json:"minDaysForRenewal,omitempty" tf:"min_days_for_renewal,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ServiceTokenSpec defines the desired state of ServiceToken
type ServiceTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceTokenParameters `json:"forProvider"`
}

// ServiceTokenStatus defines the observed state of ServiceToken.
type ServiceTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceToken is the Schema for the ServiceTokens API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type ServiceToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceTokenSpec   `json:"spec"`
	Status            ServiceTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceTokenList contains a list of ServiceTokens
type ServiceTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceToken `json:"items"`
}

// Repository type metadata.
var (
	ServiceToken_Kind             = "ServiceToken"
	ServiceToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceToken_Kind}.String()
	ServiceToken_KindAPIVersion   = ServiceToken_Kind + "." + CRDGroupVersion.String()
	ServiceToken_GroupVersionKind = CRDGroupVersion.WithKind(ServiceToken_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceToken{}, &ServiceTokenList{})
}
