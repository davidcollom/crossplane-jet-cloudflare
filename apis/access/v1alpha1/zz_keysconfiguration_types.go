/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeysConfigurationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KeysConfigurationParameters struct {

	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	KeyRotationIntervalDays *float64 `json:"keyRotationIntervalDays,omitempty" tf:"key_rotation_interval_days,omitempty"`
}

// KeysConfigurationSpec defines the desired state of KeysConfiguration
type KeysConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeysConfigurationParameters `json:"forProvider"`
}

// KeysConfigurationStatus defines the observed state of KeysConfiguration.
type KeysConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeysConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeysConfiguration is the Schema for the KeysConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type KeysConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeysConfigurationSpec   `json:"spec"`
	Status            KeysConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeysConfigurationList contains a list of KeysConfigurations
type KeysConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeysConfiguration `json:"items"`
}

// Repository type metadata.
var (
	KeysConfiguration_Kind             = "KeysConfiguration"
	KeysConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeysConfiguration_Kind}.String()
	KeysConfiguration_KindAPIVersion   = KeysConfiguration_Kind + "." + CRDGroupVersion.String()
	KeysConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(KeysConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&KeysConfiguration{}, &KeysConfigurationList{})
}
