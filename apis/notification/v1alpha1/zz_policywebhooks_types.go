/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyWebhooksObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastFailure *string `json:"lastFailure,omitempty" tf:"last_failure,omitempty"`

	LastSuccess *string `json:"lastSuccess,omitempty" tf:"last_success,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyWebhooksParameters struct {

	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// PolicyWebhooksSpec defines the desired state of PolicyWebhooks
type PolicyWebhooksSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyWebhooksParameters `json:"forProvider"`
}

// PolicyWebhooksStatus defines the observed state of PolicyWebhooks.
type PolicyWebhooksStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyWebhooksObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyWebhooks is the Schema for the PolicyWebhookss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type PolicyWebhooks struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyWebhooksSpec   `json:"spec"`
	Status            PolicyWebhooksStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyWebhooksList contains a list of PolicyWebhookss
type PolicyWebhooksList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyWebhooks `json:"items"`
}

// Repository type metadata.
var (
	PolicyWebhooks_Kind             = "PolicyWebhooks"
	PolicyWebhooks_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyWebhooks_Kind}.String()
	PolicyWebhooks_KindAPIVersion   = PolicyWebhooks_Kind + "." + CRDGroupVersion.String()
	PolicyWebhooks_GroupVersionKind = CRDGroupVersion.WithKind(PolicyWebhooks_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyWebhooks{}, &PolicyWebhooksList{})
}
