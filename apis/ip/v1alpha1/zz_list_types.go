/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ItemObservation struct {
}

type ItemParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type ListObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ListParameters struct {

	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Item []ItemParameters `json:"item,omitempty" tf:"item,omitempty"`

	// +kubebuilder:validation:Required
	Kind *string `json:"kind" tf:"kind,omitempty"`
}

// ListSpec defines the desired state of List
type ListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListParameters `json:"forProvider"`
}

// ListStatus defines the observed state of List.
type ListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// List is the Schema for the Lists API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type List struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListSpec   `json:"spec"`
	Status            ListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListList contains a list of Lists
type ListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []List `json:"items"`
}

// Repository type metadata.
var (
	List_Kind             = "List"
	List_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: List_Kind}.String()
	List_KindAPIVersion   = List_Kind + "." + CRDGroupVersion.String()
	List_GroupVersionKind = CRDGroupVersion.WithKind(List_Kind)
)

func init() {
	SchemeBuilder.Register(&List{}, &ListList{})
}
