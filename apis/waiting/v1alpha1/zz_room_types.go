/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoomObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RoomParameters struct {

	// +kubebuilder:validation:Optional
	CustomPageHTML *string `json:"customPageHtml,omitempty" tf:"custom_page_html,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableSessionRenewal *bool `json:"disableSessionRenewal,omitempty" tf:"disable_session_renewal,omitempty"`

	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	JSONResponseEnabled *bool `json:"jsonResponseEnabled,omitempty" tf:"json_response_enabled,omitempty"`

	// +kubebuilder:validation:Required
	NewUsersPerMinute *float64 `json:"newUsersPerMinute" tf:"new_users_per_minute,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	QueueAll *bool `json:"queueAll,omitempty" tf:"queue_all,omitempty"`

	// +kubebuilder:validation:Optional
	SessionDuration *float64 `json:"sessionDuration,omitempty" tf:"session_duration,omitempty"`

	// +kubebuilder:validation:Optional
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// +kubebuilder:validation:Required
	TotalActiveUsers *float64 `json:"totalActiveUsers" tf:"total_active_users,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// RoomSpec defines the desired state of Room
type RoomSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoomParameters `json:"forProvider"`
}

// RoomStatus defines the observed state of Room.
type RoomStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoomObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Room is the Schema for the Rooms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type Room struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoomSpec   `json:"spec"`
	Status            RoomStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoomList contains a list of Rooms
type RoomList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Room `json:"items"`
}

// Repository type metadata.
var (
	Room_Kind             = "Room"
	Room_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Room_Kind}.String()
	Room_KindAPIVersion   = Room_Kind + "." + CRDGroupVersion.String()
	Room_GroupVersionKind = CRDGroupVersion.WithKind(Room_Kind)
)

func init() {
	SchemeBuilder.Register(&Room{}, &RoomList{})
}
