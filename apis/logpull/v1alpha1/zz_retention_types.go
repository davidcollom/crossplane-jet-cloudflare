/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RetentionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RetentionParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// RetentionSpec defines the desired state of Retention
type RetentionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RetentionParameters `json:"forProvider"`
}

// RetentionStatus defines the observed state of Retention.
type RetentionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RetentionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Retention is the Schema for the Retentions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type Retention struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RetentionSpec   `json:"spec"`
	Status            RetentionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RetentionList contains a list of Retentions
type RetentionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Retention `json:"items"`
}

// Repository type metadata.
var (
	Retention_Kind             = "Retention"
	Retention_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Retention_Kind}.String()
	Retention_KindAPIVersion   = Retention_Kind + "." + CRDGroupVersion.String()
	Retention_GroupVersionKind = CRDGroupVersion.WithKind(Retention_Kind)
)

func init() {
	SchemeBuilder.Register(&Retention{}, &RetentionList{})
}
