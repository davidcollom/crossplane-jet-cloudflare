/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PagesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PagesParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// PagesSpec defines the desired state of Pages
type PagesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PagesParameters `json:"forProvider"`
}

// PagesStatus defines the observed state of Pages.
type PagesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PagesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Pages is the Schema for the Pagess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type Pages struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PagesSpec   `json:"spec"`
	Status            PagesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PagesList contains a list of Pagess
type PagesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pages `json:"items"`
}

// Repository type metadata.
var (
	Pages_Kind             = "Pages"
	Pages_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pages_Kind}.String()
	Pages_KindAPIVersion   = Pages_Kind + "." + CRDGroupVersion.String()
	Pages_GroupVersionKind = CRDGroupVersion.WithKind(Pages_Kind)
)

func init() {
	SchemeBuilder.Register(&Pages{}, &PagesList{})
}
