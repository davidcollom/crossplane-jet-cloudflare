/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OriginPullsCertificateObservation struct {
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	UploadedOn *string `json:"uploadedOn,omitempty" tf:"uploaded_on,omitempty"`
}

type OriginPullsCertificateParameters struct {

	// +kubebuilder:validation:Required
	Certificate *string `json:"certificate" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Required
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// OriginPullsCertificateSpec defines the desired state of OriginPullsCertificate
type OriginPullsCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OriginPullsCertificateParameters `json:"forProvider"`
}

// OriginPullsCertificateStatus defines the observed state of OriginPullsCertificate.
type OriginPullsCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OriginPullsCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OriginPullsCertificate is the Schema for the OriginPullsCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflarejet}
type OriginPullsCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OriginPullsCertificateSpec   `json:"spec"`
	Status            OriginPullsCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OriginPullsCertificateList contains a list of OriginPullsCertificates
type OriginPullsCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OriginPullsCertificate `json:"items"`
}

// Repository type metadata.
var (
	OriginPullsCertificate_Kind             = "OriginPullsCertificate"
	OriginPullsCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OriginPullsCertificate_Kind}.String()
	OriginPullsCertificate_KindAPIVersion   = OriginPullsCertificate_Kind + "." + CRDGroupVersion.String()
	OriginPullsCertificate_GroupVersionKind = CRDGroupVersion.WithKind(OriginPullsCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&OriginPullsCertificate{}, &OriginPullsCertificateList{})
}
